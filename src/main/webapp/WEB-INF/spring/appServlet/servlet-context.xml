<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
    <!-- annotation-driven 은 RequestMappingHandlerMaping , RequestMappingHandlerAdapter 두 클래스를 자동으로 빈을 등록한다.    -->
	<annotation-driven />
  	
    
    
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />



    <!-- ViewResolver 어떤 view뷰를 보여줄지 매핑 시킴  -->
	<beans:bean id="tilesViewResolver"
		class="org.springframework.web.servlet.view.tiles2.TilesViewResolver" />
	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<beans:property name="definitions" value="/WEB-INF/tiles-defs.xml" />
		<beans:property name="preparerFactoryClass" 
			value="org.springframework.web.servlet.view.tiles2.SpringBeanPreparerFactory">
		</beans:property>
	</beans:bean>
	<beans:bean id="menuPreparer" class="com.portal.complex.meunbarController.MenuPreparer" />
		<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<!--beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
		<beans:property name="prefix" value="/WEB-INF/views/" /> 
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="1" />
	</beans:bean-->
	
	<!-- Configure to plugin JSON as request and response in method handler 
		 messageConverters를 커스터 마이징 하기 위해서 선언한다. 그리고 아래 messageConverters를 가지고 Jackson의
		  converter로 바꾼다.
	-->
	<beans:bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:ref bean="jsonMessageConverter" />
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- Configure bean to convert JSON to POJO and vice versa -->
	<beans:bean id="jsonMessageConverter"
	 class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<beans:property name="supportedMediaTypes" value="application/json"/>
	</beans:bean>
	

	
	
	
    <!-- 컨트롤러 어노테이션 인식할수 있도록 등록 -->
    <context:component-scan base-package="com.portal.complex"
    	annotation-config="true" />
    <context:component-scan
		base-package="com.protal.complex.userManagerController"
		annotation-config="true" />
	<context:annotation-config/>
		

</beans:beans>
